Using the APIs
--------------

[NOTE]
This section only gives an introduction to the APIs available. The actual
API reference will feature more options for each of the APIs described here
and will always be more up-to-date than the documentation here.

This section goes a level lower than the 'Getting Started' guide and features
the aspects of the APIs offered by the SDK.

Connecting
~~~~~~~~~~

While this has been discussed extensively in previous
sections, you can connect to a bucket using the simple
`Couchbase.connect()` class method.

[source,python]
---------------------------------
from couchbase import Couchbase

client = Couchbase.connect(bucket='default')
--------------------------------

Multiple Nodes
^^^^^^^^^^^^^^

Sometimes, it might be beneficial to let the client know
beforehand about multiple nodes; for example if you have
several nodes in the cluster and some may not be up; if only
one node is passed, the client's constructor will raise an
exception. You can pass multiple nodes as a list so that
the constructor will try each node until it gets a successful
connection (or the timeout is reached)

[source,python]
.Using Multiple Nodes
--------------------------------

c = Couchbase.connect(
    bucket='default',
    host=['foo.com', 'bar.com', 'baz.com']
)
---------------------------------

Timeouts
^^^^^^^^

The client uses timeouts so that your application will not wait too
long if the cluster is overloaded or there are connectivity issues.
By default, this timeout value is 2.5 seconds.

You can adjust this value by setting it in the constructor

[source,python]
---------------
c = Couchbase.connect(bucket='default', timeout=5.5)
---------------

Or setting the `timeout` property

[source,python]
---------------
c.timeout = 4.2
---------------


SASL Buckets
^^^^^^^^^^^^

If your bucket is password protected, you can pass the SASL password
using the `password` keyword parameter in the constructor

[source,python]
----------------
c = Couchbase.connect(bucket='default', password='s3cr3t')
----------------

Threads
^^^^^^^

This will be discussed later on in more detail, but the `Connection`
object is fully thread-safe out of the box by default. You may tune
some parameters which sacrifice thread-safety for performance.

API Return Values
~~~~~~~~~~~~~~~~~

Before we discuss the individual sections of the API, we'll discuss the common
return value which is the `Result` object.

Typically subclasses of this object are returned appropriate for the operation
executed.

All Result objects have the following properties

* `success`
+
A boolean property indicating whether this operation was successful or not.

* `rc`
+
This is the low level return code as received from the underlying
`libcouchbase` layer. This is 0 on success and nonzero on failure. Typically
this will be useful on operations in which `quiet` was set to `True`. Normally
you'd use it like this
+
[source,python]
---------------
result = client.get("key", quiet=True)
if not result.success:
    print "Got error code", result.rc
--------------

* `__str__`
+
While this isn't really a property, printing out the result object will yield
interesting metadata to aid in debugging this particular operation.


Storing Data
~~~~~~~~~~~~


Setting Values
^^^^^^^^^^^^^^

These methods, if successful, set the value of their respective keys.
If they fail, they will raise an exception (and are not affected by the
`quiet` property).

These methods can accept a `format` property (which indicates the format
in which the value will be stored on the server) as well as a `ttl`
property which indicates the lifetime of the value; after the `ttl` is
reached, the value is deleted from the server.

* `client.set(key, value, **kwargs)`
+
Will set the key unconditionally

* `client.add(key, value, **kwargs)`
+
Will set the key to the specified value, but only if the key does not
already exists (an exception will be raised otherwise).

* `client.replace(key, value, **kwargs)`
+
Will replace an existing key with a new value. This will raise an exception
if the key does not already exist


Arithmetic and Counter Operations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

These methods operate on 64 bit integer counters. They provide efficient
mutation and retrieval of values. You may use these in place of the
`set` family of methods when working with numeric values; for example:

[source,python]
.Using `set`
---------------
key = "counter"
try:
    result = c.get("counter")
    c.set(key, result.value + 1)
except KeyNotFoundError:
    c.add(key, 10)
---------------

[source,python]
.Using `incr`
---------------
key = "counter"
c.incr(key, initial=10)
---------------

These methods accept the `ttl` argument to set the expiration time for their
values, as well as an `amount` value which indicates by what amount to
modify their values. Additionally, an `initial` keyword argument is available
to provide the default value for the counter if it does not yet exists. If
an `initial` argument is not provided and the key does not exist, an
exception is raised.

The value for the counter stored must either not exist (if `initial` is used)
or should be a "Number", that is, a textual representation of an integer.

If using the default `FMT_JSON`, then your integers are already compliant.

If the existing value is not already a number, the server will raise an
exception (specifically, a `DeltaBadvalError`).

Arithmetic methods return a `ValueResult` object (subclass of `Result`). The
`value` property can be used to obtain the current value of the counter.

* `c.incr(key, amount=1, ttl=0)`
+
Increments the value stored under the key.

* `c.decr(key, amount=1, ttl=0)`
+
Decrements the value stored under the key. In this case, `amount` is how much
to _subtract_ from the key


Append and Prepend Operations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

These operations act on the stored values and append or prepend additional
data to it. They treat existing values as strings and such only work if the
existing data stored is a string (i.e. `FMT_UTF8` or `FMT_BYTES`).

The `format` argument is still available, but the value must be either
`FMT_UTF8` or `FMT_BYTES`. If not specified, it defaults to `FMT_UTF8`

Otherwise, they are part of the `set` family of methods

[source,python]
---------------
c.set("greeting", "Hello", format=FMT_UTF8)
c.append("greeting", " World!")
c.get("greeting").value == "Hello World!"
c.prepend("greeting", "Why, ")
c.get("greeting").value == "Why, Hello World!"
---------------

* `c.append(key, data_to_append, **kwargs)`
+
Appends data to an existing value.

* `c.prepend(key, data_to_prepend, **kwargs)`
+
Prepends data to an existing value

[CAUTION]
==================================================
Ensure that you only append or prepend to values which were initially
stored as `FMT_UTF8` or `FMT_BYTES`. It does not make sense to append
to a _JSON_ or _pickle_ string.

Consider:

[source,python]
---------------
c.set("a_dict", { "key for" : "a dictionary" })
---------------

The key `a_dict` now looks like this on the server:

    {"key for":"a dictionary"}

Now, prepend to it

[source,python]
---------------
c.prepend("a dict", "blah blah blah")
---------------

The value for `a_dict` looks like this now

    blah blah blah{"key for":"a dictionary"}

Now, when you'll try to get it back, you'll see this happen:

---------------
>>> c.get("a_dict")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "couchbase/connection.py", line 325, in get
    return _Base.get(self, key, ttl, quiet)
  File "/usr/lib/python2.7/json/__init__.py", line 326, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python2.7/json/decoder.py", line 365, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python2.7/json/decoder.py", line 383, in raw_decode
    raise ValueError("No JSON object could be decoded")
couchbase.exceptions.ValueFormatError: <Failed to decode bytes, Results=1, inner_cause=No JSON object could be decoded, C Source=(src/convert.c,215), OBJ='blah blah blah{"key for": "a dictionary"}'>
----------------

Unfortunately, the SDK has no way to pre-emptively determine whether the existing
value is a string or not, and the server does not enforce this.

=============================================================


Expiration Operations
^^^^^^^^^^^^^^^^^^^^^

This consists of a single method which is used to update the expiration time
of a given key. It is passed two arguments, a key and an expiration time.

If the expiration time is greater than zero, the key receives the new expiration
time (which is an offset in seconds, assuming it is smaller than `60*60*24*30`
(i.e. a month) - if it is greater, it is considered to be a Unix timestamp).

If the expiration time is zero, then any existing expiration time is cleared
and the value remains stored indefinitely (unless explicitly deleted or
updated with expiration at a later time).

This is a lightweight means by which to ensure entities "stay alive" without
the overhead of having to re-set their value or fetch them.

* `c.touch(key, ttl)`
+
Update the given key with the specified `ttl`.


Deleting Data
~~~~~~~~~~~~~

* `client.delete(key, quiet=False)`
+
Remove a key from the server. If `quiet` is specified, an exception is not
raised if the key does not exist.

Retrieving Data
~~~~~~~~~~~~~~~

* `client.get(key, quiet=False, ttl=0)`
+
Retrieve a key from the server. If the key does not exist, an exception is
raised if the key does not exist and `quiet` was set to False.

If `ttl` is specified, this also modifies, in-situ, the expiration time
of the key when retrieving it. This is also known as _Get and Touch_

This returns a `ValueResult` object (subclass of `Result`) which may be used
to obtain the actual value via the `value` property.

Locking Data/Ensuring Consistency
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In production deployments, it is possible that you will have more than a single
instance of your application trying to modify the same key. In this case a race
condition happens in which a modification one instance has made is immediately
overidden.

Consider this code:

[source,python]
--------------------------------
def add_friend(user_id, friend):
    result = c.get("user_id-" + user_id)
    result.value['friends'][friend] = { 'added' : time.time() }
    c.set("user_id-" + user_id, result.value)
--------------------------------

In this case, `friends` is a dictionary of friends the user has added,
with the keys being the friend IDs, and the values being the time when
they were added.

When the friend has been added to the dictionary, the document is stored
again on the server.

Assume that two users add the same friend at the same time, in this
case there is a race condition where one version of the friends dict
ultimately wins.

Couchbase provides two means by which to solve for this problem. The
first is called _Opportunistic Locking_, while the second is called
_Pessimistic Locking_.

Both forms of locking involve using a _CAS_ value. This value indicates
the state of a document at a specific time. Whenever a document is
modified, this value changes. The contents of this value are not significant
to the application, however it can be used to ensure consistency. You may
pass the _CAS_ of the value as it is known to the application and have the
server make the operation fail if the current (server-side) _CAS_ value
differs.


Opportunistic Locking
^^^^^^^^^^^^^^^^^^^^^

The opportunistic locking functionality can be employed by using the
`cas` keyword argument to the `set` family of methods.

Note that the `cas` value itself may be obtained by inspecting the
`cas` property of the `Result` object returned by any of the API
functions.

In the previous example (i.e. `add_friend`), we can now modify it so
that it handles concurrent modifications gracefully:


[source,python]
--------------------------------
def add_friend(user_id, friend):

    while True:
        result = c.get("user_id-" + user_id)
        result.value['friends'][friend] = { 'added' : time.time() }

        try:
            c.set("user_id-" + user_id, result.value, cas=result.cas)
            break

        except KeyExistsError:
            print "It seems someone tried to modify our user at the same time!"
            print "Trying again"
            
--------------------------------

This is called _opportunistic_ locking, because if the _CAS_ is not modified
during the first loop, the operation succeeds without any additional steps.

Pessimistic Locking
^^^^^^^^^^^^^^^^^^^

Pessimistic locking is useful for highly contented resources; that is, if
the key being accessed has a high likelihood of being contented. While
this method may be more complex, it is much more efficient for such resources.

We can use pessimistic locking by employing the `lock` and `unlock` functions.

The `lock` method locks the key on the server for a specified amount of time.
Once the key is locked, further attempts to access the key (without passing
the proper CAS) will fail with a `TemporaryFailureError` exception until the
key is either unlocked, or the lock timeout is reached.

* `c.lock(key, ttl=0)`
+
This has the same behavior as `get` (i.e. it returns the value on the server),
but the `ttl` argument now indicates how long the lock should be held for.
+
By default, the server-side lock timeout is used (which is 15 seconds).
+
Returns a `ValueResult`


* `c.unlock(key, cas)`
+
Unlocks the key. The key must have been previously locked and must have been
locked with the specified `cas`. The `cas` value can be obtained from the
`Result` object's `cas` property


[IMPORTANT]
.Implicit Unlocking
Calling any of the `set` methods with a valid CAS will implicitly
unlock the key, and thus make an explicit call to `unlock` unnecessary --
calling `unlock` on a key that is not currently locked will raise an
exception.

We can rewrite our `add_friend` example using the lock functions

[source,python]
--------------------------------
def add_friend(user_id, friend):
    while True:
        try:
            result = c.lock("user_id-" + user_id)
            break

        except TemporaryFailError:
            # Someone else has locked the key..
            pass
    try:
        result.value['friends'][friend] = { 'added' : time.time() }
        c.set("user_id-" + user_id, result.value, cas=result.cas)

    except:
        # We want to unlock if anything happens, rather than waiting
        # for it to time out
        c.unlock(result.key, result.cas)

        # then, raise the exception
        raise

--------------------------------

[TIP]
.When To Use Optimistic Or Pessimistic Locking
==============================================

Optimistic locking is more convenient and sometimes more familiar to users.
Additionally, it does not require an explicit 'unlock' phase.

However, during a CAS mismatch, the full value is still sent to the server
in the case of opportunistic locking. For highly contended resources this
has impacts on network I/O, as the value must be sent multiple times before
it is actually stored.

Pessimistic locking does not retrieve its value unless the operation was
successful, however.
============================================



Working With Views
~~~~~~~~~~~~~~~~~~

This section will provide a bit more information on how to work with views from
the Python SDK. If you are new to views, it is recommended you
read the server documentation <link?> which covers the topic itself more extensively.


In order to use views, you must have already set up _design documents_ containing
one or more view queries you have defined. You can execute these queries from the
Python SDK and retrieve their results.

You can define views either via the Couchbase Server web interface, or through the
Python SDK (see <link> design document management functions).

Couchbase Server comes with two pre-defined sample buckets which can be installed
from the "Sample Buckets" section in the "Settings" pane.

The basic interface for views is such

----------------
client.query(design_name, view_name)
----------------

Which returns an iterable object which yields `ViewRow` objects.

`ViewRow` objects are simple namedtuples with the following fields:

* `vr.key`
+
The key emitted by the view's `map` function (i.e. first argument to `emit`

* `vr.value`
+
The _value_ emitted by the view's `map` function (i.e. second argument to `emit`)

* `vr.id`
+
The document ID of this row. Can be passed to `get`, `set`, and such.


* `vr.doc`
+
A `Result` object containing the actual document, if the `query` method was passed
the `include_docs` directive (see later).

The object returned by `query` is a class which defines an `__iter__` (and thus
does not have a `__len__` or `items()` method). You can convert it to a list by
using _list comprehension_:

[source,python]
---------------
rows_as_list = [ c.query("beer", "brewery_beers") ]
---------------

You can also pass options to the `query` method. The list of available
options are documented in the `Query` class in the API documentation.

-----------------
from couchbase.views.params import Query

client.query(design_name, view_name,
             limit=3,
             mapkey_range = ["abbaye", "abbaye" + Query.STRING_RANGE_END],
             descending=True)
-----------------

The `include_docs` directive may be used to fetch the documents along with each
`ViewRow` object. Note that while it is possible to simply call `c.get(vr.id)`,
the client handles the `include_docs` directive by actually performing a
batched (`get_multi`) operation.


You can also pass options for the server itself to handle. These options
may be passed as either an encoded query string, a list of key-value
parameters, or a `Query` object.

[source,python]
.Using encoded query strings
----------------------------
client.query("beer", "brewery_beers", query="limit=3&skip=1&stale=false")
----------------------------

Note that this is the most efficient way to pass options as they do not
need to be re-encoded for each invocation.

However, it is impossible for the SDK to verify the inputs and thus it is
suggested you only use a raw string once your query has been refined and
optimized.

[source,python]
.Using key-value pairs
----------------------
client.query("beer", "brewery_beers", limit=3, skip=1, stale=False)
----------------------

This allows simple and idiomatic construction of query options.

[source,python]
.Using a Query object
---------------------
from couchbase.views.params import Query

q = Query
q.limit = 3
q.skip = 1
q.stale = False
client.query("beer", "brewery_beers", query=q)
----------------------

The `Query` object makes it simple to programmatically construct a Query, and
provides the most maintainable option. When using key-value pairs, the SDK
actually converts them to a `Query` object before processing.

`Query` objects also have named properties, making query construction easy
to integrate if using an IDE with code completion.


Common View Parameters
^^^^^^^^^^^^^^^^^^^^^^

Here are some common parameters used for views. They are available either
as keyword options to the `query` method, or as properties on the `Query`
object

Server Parameters
+++++++++++++++++

* `mapkey_range = [ "start", "end" ]`
+
Set the start and end key range for keys emitted by the `map` function

* `startkey = "start"`
+
Set the start key

* `endkey = "end"`
+
Set the end key

* `descending = True`
+
Invert the default sort order

* `stale = False`
+
Possible values are `True`, `False`, or the string `update_after`.

* `limit = 10`
+
Limit the number of rows returned by the query

`query` Method Options
++++++++++++++++++++++

These are only available as options to the `query` method, and should
not be used on the `Query` object.

* `include_docs = True`
+
Fetch corresponding documents along with each row

* `streaming = True`
+
Fetch results incrementally. Don't buffer all results in memory at once.


Pagination
^^^^^^^^^^

Often, view results can be large. By default the client reads all the results
into memory and then returns an iterator over that result set. You can change
this behavior by specifying the `streaming` option to the `query` method. When
used, results will be fetched incrementally.

Using `streaming` does not have any impact on how the rows are returned.


Design Document Management
~~~~~~~~~~~~~~~~~~~~~~~~~~

The Python Couchbase SDK provides means by which you can manage design
documents; including all phases of design document development. You can

* Create a development design
* Publish a development design to a production design
* Retrieve a design document
* Delete a design document

Note that all design creation methods take a `syncwait` argument, which is an
optional amount of time to wait for the operation to be complete. By default
the server (and thus the SDK) only *schedule* a design document operation.
This means that if you try to use the view right after you created it, you
may get an error as the operation has not yet completed. Using the `syncwait`
parameter will poll for this many seconds - and either return successfully or
raise an exception.

An additional argument which may be provided is the `use_devmode` parameter. If
on, the name of the design will be prepended with `dev_` (if it does not already
start with it).

All these operations return an `HttpResult` object which contains the decoded
JSON payload in its `value` property.

* `c.design_create(name, design, use_devmode=True, syncwait=0)`
+
Creates a new design document. `name` is the name of the design document (e.g.
`"beer"`). `design` is either a Python dictionary representing the structure
of the design or a valid string (i.e. encoded JSON) to be passed to the server.

* `c.design_get(name, use_devmode=True)`
+
Retrieves the design document.

* `c.design_publish(name, syncwait=0)`
+
Converts a development-mode view into a production mode view. This is equivalent
to pressing the *Publish* button on the web UI.

* `c.design_delete(name, use_devmode=True)`
+
Delete a design document
